name: Build and Sign Windows MAUI App

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_PATH: ProxyManage/ProxyManage.csproj
  # 包名变量
  PACKAGE_NAME: ProxyManage
jobs:
  build-and-sign:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest
    permissions:  # 关键权限配置
      contents: write  # 允许创建 Release
      packages: write  # 允许上传资源
      id-token: write  # 允许使用 GitHub Token
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # 从 Git 标签提取并格式化版本号
    - name: Extract and Format Version from Tag
      id: version
      run: |
        # 去除标签前缀 "v"
        $rawVersion = "${{ github.ref_name }}".TrimStart('v')
        
        # 补全为四段式
        $versionParts = $rawVersion -split '\.'
        while ($versionParts.Count -lt 4) { $versionParts += '0' }
        $formattedVersion = $versionParts -join '.'
        
        # 验证格式
        if (-not ($formattedVersion -match '^\d+\.\d+\.\d+\.\d+$')) {
          Write-Error "Invalid version format: $formattedVersion"
          exit 1
        }
        
        # 修复：使用 PowerShell 语法设置环境变量
        echo "version=$formattedVersion" >> $env:GITHUB_ENV
        Write-Output "Formatted Version: $formattedVersion"
        
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Update Package.appxmanifest version
      shell: powershell
      run: |
        $manifestPath = "${{ github.workspace }}\ProxyManage\Platforms\Windows\Package.appxmanifest"
        $xml = [xml](Get-Content $manifestPath)
        $xml.Package.Identity.Version = "${{ env.version }}"
        $xml.Save($manifestPath)
    - name: Clean
      run: dotnet clean

    - name: Clean Artifacts
      run: |
        if (Test-Path ${{ github.workspace }}/ProxyManage/artifacts/) {
          Remove-Item -Path ${{ github.workspace }}/ProxyManage/artifacts/ -Recurse -Force
        }
    - name: Restore Dependencies
      run: dotnet restore -r win-x64

    - name: Install Certificate
      run: |
        $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_PFX_BASE64 }}")
        $tempPfx = "certificate.pfx"
        [IO.File]::WriteAllBytes($tempPfx, $pfxBytes)
        Import-PfxCertificate `
          -FilePath $tempPfx `
          -CertStoreLocation "Cert:\CurrentUser\My" `
          -Password (ConvertTo-SecureString -String "${{ secrets.WINDOWS_PFX_PASSWORD }}" -AsPlainText -Force)
    - name: Build and Publish
      run: |
        dotnet publish $env:PROJECT_PATH `
          -c Release `
          -f net8.0-windows10.0.19041.0 `
          -p:WindowsPackageType=MSIX `
          -p:GenerateAppInstallerFile=True `
          -p:AppxPackageVersion=$env:version `
          -p:AppxPackageDir=./artifacts/windows/AppPackages/ `
          -p:ApplicationVersion=${{ env.version }} `
          --output ./artifacts/windows
        Write-Host "Published files:"
        Get-ChildItem -Path ./artifacts/windows -Recurse | ForEach-Object { Write-Host $_.FullName }
    - name: Verify MSIX Output
      run: |
        Get-ChildItem -Path ${{ github.workspace }}/ProxyManage/artifacts/ -Recurse
        
    - name: Find signtool path
      id: find_signtool
      run: |
        $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Filter signtool.exe -Recurse | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1
        if ($signtoolPath) {
            echo "signtool_path=$($signtoolPath.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
            Write-Error "signtool.exe not found."
        }
    - name: Print current project directory
      run: |
        $currentDir=$(pwd)
        echo "Current project directory: $currentDir"
    - name: Sign MSIX Package
      run: |
        pwd
        $msixPath = Get-ChildItem -Path $currentDir -Filter *.msix -Recurse | Select-Object -First 1
        if (-not $msixPath) {
            Write-Error "No MSIX file found in $currentDir directory."
        } else {
            $signtoolPath = "${{ steps.find_signtool.outputs.signtool_path }}"
            & $signtoolPath sign `
              /fd SHA256 `
              /f certificate.pfx `
              /p "${{ secrets.WINDOWS_PFX_PASSWORD }}" `
              /tr http://timestamp.digicert.com `
              $msixPath.FullName
        }
    - name: Debug Folder Structure
      run: |
        # 打印文件夹内容
        Get-ChildItem -Path ${{ github.workspace }}/ProxyManage/artifacts/windows/AppPackages/ -Recurse
    - name: Zip the Folder
      run: |
        # 生成 ZIP 文件的正确路径
        Compress-Archive -Path "${{ github.workspace }}/ProxyManage/artifacts/windows/AppPackages" -DestinationPath "${{ github.workspace }}/${{ env.PACKAGE_NAME }}-${{ env.version }}.zip"
        # 验证 ZIP 文件是否存在
        if (-not (Test-Path "${{ github.workspace }}/${{ env.PACKAGE_NAME }}-${{ env.version }}.zip")) {
          Write-Error "ZIP file creation failed!"
          exit 1
        }
    - name: Upload Release with ZIP
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        files: |
          ${{ env.PACKAGE_NAME }}-${{ env.version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
